// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/ljfranklin/service-canary/event-emitter"
)

type FakeEmitter struct {
	EmitStub        func(serviceName string, value int, tags map[string]string) error
	emitMutex       sync.RWMutex
	emitArgsForCall []struct {
		serviceName string
		value       int
		tags        map[string]string
	}
	emitReturns struct {
		result1 error
	}
}

func (fake *FakeEmitter) Emit(serviceName string, value int, tags map[string]string) error {
	fake.emitMutex.Lock()
	fake.emitArgsForCall = append(fake.emitArgsForCall, struct {
		serviceName string
		value       int
		tags        map[string]string
	}{serviceName, value, tags})
	fake.emitMutex.Unlock()
	if fake.EmitStub != nil {
		return fake.EmitStub(serviceName, value, tags)
	} else {
		return fake.emitReturns.result1
	}
}

func (fake *FakeEmitter) EmitCallCount() int {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return len(fake.emitArgsForCall)
}

func (fake *FakeEmitter) EmitArgsForCall(i int) (string, int, map[string]string) {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return fake.emitArgsForCall[i].serviceName, fake.emitArgsForCall[i].value, fake.emitArgsForCall[i].tags
}

func (fake *FakeEmitter) EmitReturns(result1 error) {
	fake.EmitStub = nil
	fake.emitReturns = struct {
		result1 error
	}{result1}
}

var _ event_emitter.Emitter = new(FakeEmitter)
